name: Tests

# Executa os testes em Pull Requests e pushes para main
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src tests
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src tests

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    
    steps:
    - name: Discord Notification - Success
      if: needs.test.result == 'success' && needs.lint.result == 'success'
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      with:
        args: |
          ‚úÖ **CI Pipeline Successful** 
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          **Event:** ${{ github.event_name }}
          
          üìä All tests passed and code quality checks successful!
          üîó [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Discord Notification - Failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure'
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      with:
        args: |
          ‚ùå **CI Pipeline Failed**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          **Event:** ${{ github.event_name }}
          
          üí• Tests failed: ${{ needs.test.result }}
          üîç Lint failed: ${{ needs.lint.result }}
          üîó [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Discord Notification - Cancelled
      if: needs.test.result == 'cancelled' || needs.lint.result == 'cancelled'
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      with:
        args: |
          ‚ö†Ô∏è **CI Pipeline Cancelled**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          **Event:** ${{ github.event_name }}
          
          üîó [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})